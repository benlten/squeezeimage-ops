name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate YAML files
      run: |
        # Install yamllint
        sudo apt-get update
        sudo apt-get install -y yamllint
        
        # Check all YAML files
        echo "Validating YAML files..."
        find . -name "*.yml" -o -name "*.yaml" | xargs yamllint -d relaxed
    
    - name: Validate Docker Compose
      run: |
        echo "Validating docker-compose.yml syntax..."
        docker-compose config -q
    
    - name: Check shell scripts
      run: |
        echo "Checking shell scripts for syntax errors..."
        find . -name "*.sh" -type f -exec bash -n {} \;
    
    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH'
    
  docker-build:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Check for Dockerfiles
      id: dockerfile-check
      run: |
        if find . -name "Dockerfile*" -type f | grep -q .; then
          echo "dockerfiles_found=true" >> $GITHUB_OUTPUT
          echo "Found Dockerfiles to build"
        else
          echo "dockerfiles_found=false" >> $GITHUB_OUTPUT
          echo "No Dockerfiles found, skipping build"
        fi
    
    - name: Build Docker images
      if: steps.dockerfile-check.outputs.dockerfiles_found == 'true'
      run: |
        for dockerfile in $(find . -name "Dockerfile*" -type f); do
          dir=$(dirname "$dockerfile")
          name=$(basename "$dockerfile")
          echo "Building $dockerfile in $dir..."
          docker build -f "$dockerfile" "$dir" --tag test-build:latest
        done
    
    - name: Test Docker Compose build
      run: |
        # Create dummy .env for CI
        echo "SQUEEZE_SECRET=test-secret-ci" > .env
        
        # Test docker-compose build
        docker-compose build --no-cache
        
        # Clean up
        rm .env
    
  synthetic-tests:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Check for synthetic tests
      run: |
        if [ -d "synthetics" ]; then
          echo "Found synthetics directory"
          
          # Check for package.json files
          for dir in synthetics/*/; do
            if [ -f "$dir/package.json" ]; then
              echo "Installing dependencies in $dir..."
              cd "$dir"
              npm ci || npm install
              
              # Run tests if test script exists
              if npm run | grep -q "test"; then
                echo "Running tests in $dir..."
                npm test || true
              fi
              
              cd - > /dev/null
            fi
          done
        else
          echo "No synthetics directory found"
        fi
    
  summary:
    runs-on: ubuntu-latest
    needs: [validate, docker-build, synthetic-tests]
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "## CI Pipeline Summary"
        echo "âœ… All CI checks completed"
        echo ""
        echo "### Checks performed:"
        echo "- YAML validation"
        echo "- Docker Compose validation"  
        echo "- Shell script syntax"
        echo "- Security scanning"
        echo "- Docker build tests"
        echo "- Synthetic test validation"